<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ウェルネス・プラットフォーム v1.3</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@400;500;700&family=Noto+Serif+JP:wght@400;600&display=swap" rel="stylesheet">
   
    <script src="https://unpkg.com/react@17/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
   
    <script src="https://www.gstatic.com/firebasejs/9.15.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.15.0/firebase-auth-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.15.0/firebase-firestore-compat.js"></script>


    <style>
        :root {
            --main-pink: #E9A4B8;
            --support-green: #7A9B7A;
            --bg-off-white: #F8F7F5;
            --text-charcoal: #4E4E4E;
        }
        body {
            font-family: 'Noto Sans JP', sans-serif;
            background-color: var(--bg-off-white);
            color: var(--text-charcoal);
        }
        h1, h2, h3, h4 {
            font-family: 'Noto Serif JP', serif;
        }
        .form-step { display: none; }
        .form-step.active { display: block; animation: fadeIn 0.5s ease-in-out; }
        .custom-radio:checked { background-color: var(--main-pink); border-color: var(--main-pink); }
        .custom-radio:checked + span { color: var(--text-charcoal); font-weight: 600; }
        input[type="radio"]:checked + .rating-label { background-color: var(--main-pink); color: white; border-radius: 9999px; font-weight: bold; }
        .loader { border: 4px solid #f3f3f3; border-radius: 50%; border-top: 4px solid var(--main-pink); width: 40px; height: 40px; animation: spin 2s linear infinite; }
        @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
        .fade-in { animation: fadeIn 0.6s ease-in-out; }
        @keyframes fadeIn { from { opacity: 0; transform: translateY(10px); } to { opacity: 1; transform: translateY(0); } }
    </style>
</head>
<body>
    <div id="root"></div>


    <script type="text/babel">
        const firebaseConfig = {
          apiKey: "AIzaSyCSK2XMhrPQbZ8J1y-Kz3YCoU45rDKv1bM",
          authDomain: "trauma-note-app.firebaseapp.com",
          projectId: "trauma-note-app",
          storageBucket: "trauma-note-app.appspot.com",
          messagingSenderId: "643740992546",
          appId: "1:643740992546:web:dba603fed8f73b09c9f67b"
        };
        const appId = 'wellness-app';


        // --- Main App Component ---
        function App() {
            const [user, setUser] = React.useState(null);
            const [loading, setLoading] = React.useState(true);
            const [view, setView] = React.useState('dashboard');
            const [diagnosisResult, setDiagnosisResult] = React.useState(null);


            const auth = React.useMemo(() => {
                if (!firebase.apps.length) {
                    firebase.initializeApp(firebaseConfig);
                }
                return firebase.auth();
            }, []);
           
            const db = React.useMemo(() => firebase.firestore(), []);


            React.useEffect(() => {
                const unsubscribe = auth.onAuthStateChanged((currentUser) => {
                    setUser(currentUser);
                    setLoading(false);
                });
                return () => unsubscribe();
            }, [auth]);


            const handleFinishDiagnosis = async (result) => {
                setDiagnosisResult(result);
                setView('report');
                if (user) {
                    try {
                        const diagnosesCollectionPath = `/artifacts/${appId}/users/${user.uid}/diagnoses`;
                        await db.collection(diagnosesCollectionPath).add({
                            ...result,
                            createdAt: firebase.firestore.FieldValue.serverTimestamp()
                        });
                    } catch (e) {
                        console.error("Error saving diagnosis:", e);
                    }
                }
            };
           
            if (loading) {
                return <div className="text-center p-10">読み込み中...</div>;
            }


            if (!user) {
                return <AuthScreen auth={auth} />;
            }
           
            return (
                <div className="min-h-screen" style={{backgroundColor: 'var(--bg-off-white)'}}>
                   {view === 'dashboard' && <Dashboard user={user} setView={setView} auth={auth} />}
                   {view === 'diagnosis' && <AiDiagnosis onFinish={handleFinishDiagnosis} />}
                   {view === 'report' && <DiagnosisReport result={diagnosisResult} setView={setView} />}
                </div>
            );
        }


        // --- Authentication Component ---
        function AuthScreen({ auth }) {
            const [error, setError] = React.useState('');
            const [email, setEmail] = React.useState('');
            const [password, setPassword] = React.useState('');
           
            const handleSignUp = async () => {
                setError('');
                try {
                    await auth.createUserWithEmailAndPassword(email, password);
                } catch (err) {
                    setError(`登録に失敗しました: ${err.message}`);
                }
            };
           
            const handleLogin = async () => {
                setError('');
                try {
                    await auth.signInWithEmailAndPassword(email, password);
                } catch (err) {
                    setError(`ログインに失敗しました: ${err.message}`);
                }
            };


            const handleGoogleSignIn = async () => {
                setError('');
                const provider = new firebase.auth.GoogleAuthProvider();
                try {
                    await auth.signInWithPopup(provider);
                } catch (err) {
                    setError(`Googleログインに失敗しました: ${err.message}`);
                }
            };


            return (
                <div className="min-h-screen flex items-center justify-center p-4">
                    <div className="max-w-md w-full bg-white p-8 rounded-2xl shadow-lg">
                        <div>
                            <h1 className="text-2xl font-semibold text-center mb-6">ログイン</h1>
                            {error && <p className="bg-red-100 text-red-700 p-3 rounded-lg mb-4 text-sm">{error}</p>}
                            <div className="space-y-4">
                                <div>
                                    <label className="text-sm font-medium">メールアドレス</label>
                                    <input type="email" value={email} onChange={(e) => setEmail(e.target.value)} className="w-full mt-1 p-2 border rounded-lg" />
                                </div>
                                <div>
                                    <label className="text-sm font-medium">パスワード</label>
                                    <input type="password" value={password} onChange={(e) => setPassword(e.target.value)} className="w-full mt-1 p-2 border rounded-lg" />
                                </div>
                                <div className="flex flex-col sm:flex-row gap-2">
                                    <button onClick={handleLogin} className="w-full flex-1 py-2 px-4 border rounded-full font-semibold">ログイン</button>
                                    <button onClick={handleSignUp} className="w-full flex-1 py-2 px-4 border rounded-full font-semibold">新規登録</button>
                                </div>
                                <div className="relative my-4">
                                    <div className="absolute inset-0 flex items-center"><div className="w-full border-t border-gray-300"></div></div>
                                    <div className="relative flex justify-center text-sm"><span className="bg-white px-2 text-gray-500">または</span></div>
                                </div>
                                <button onClick={handleGoogleSignIn} className="w-full flex items-center justify-center py-2 px-4 border rounded-full font-semibold">
                                    <svg className="w-5 h-5 mr-2" viewBox="0 0 48 48"><path fill="#EA4335" d="M24 9.5c3.54 0 6.71 1.22 9.21 3.6l6.85-6.85C35.9 2.38 30.47 0 24 0 14.62 0 6.51 5.38 2.56 13.22l7.98 6.19C12.43 13.72 17.74 9.5 24 9.5z"></path><path fill="#4285F4" d="M46.98 24.55c0-1.57-.15-3.09-.38-4.55H24v9.02h12.94c-.58 2.96-2.26 5.48-4.78 7.18l7.73 6c4.51-4.18 7.09-10.36 7.09-17.65z"></path><path fill="#FBBC05" d="M10.53 28.59c-.48-1.45-.76-2.99-.76-4.59s.27-3.14.76-4.59l-7.98-6.19C.92 16.46 0 20.12 0 24s.92 7.54 2.56 10.78l7.97-6.19z"></path><path fill="#34A853" d="M24 48c6.48 0 11.93-2.13 15.89-5.81l-7.73-6c-2.15 1.45-4.92 2.3-8.16 2.3-6.26 0-11.57-4.22-13.47-9.91l-7.98 6.19C6.51 42.62 14.62 48 24 48z"></path><path fill="none" d="M0 0h48v48H0z"></path></svg>
                                    Googleでログイン
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            );
        }
       
        // --- Dashboard Component ---
        function Dashboard({ user, setView, auth }) {
            return (
                 <div className="max-w-2xl mx-auto p-4 sm:p-6">
                    <header className="text-center mb-10">
                        <h1 className="text-3xl sm:text-4xl font-semibold">ようこそ！</h1>
                        <p className="mt-2 break-all">こんにちは、{user.displayName || user.email}さん</p>
                    </header>
                    <main className="space-y-4">
                        <button onClick={() => setView('diagnosis')} className="w-full bg-white p-6 rounded-lg text-left hover:bg-gray-50 transition shadow-sm text-lg font-semibold">AI心と体の診断を受ける</button>
                        <button disabled className="w-full bg-white p-6 rounded-lg text-left text-gray-400 cursor-not-allowed shadow-sm text-lg font-semibold">トラウマノートを開く (準備中)</button>
                        <button disabled className="w-full bg-white p-6 rounded-lg text-left text-gray-400 cursor-not-allowed shadow-sm text-lg font-semibold">食事と体調を記録する (準備中)</button>
                    </main>
                    <footer className="text-center mt-10">
                        <button
                            onClick={() => auth.signOut()}
                            className="py-2 px-6 border rounded-full shadow-sm text-sm font-medium hover:bg-gray-100"
                        >
                            ログアウト
                        </button>
                    </footer>
                </div>
            );
        }


        // --- AI Diagnosis Component ---
        function AiDiagnosis({ onFinish }) {
            // This is a placeholder. You would integrate the full diagnosis form here.
            const [name, setName] = React.useState('');
           
            const handleSubmit = async (e) => {
                e.preventDefault();
                // Placeholder for AI logic
                console.log("Submitting diagnosis for:", name);
                const fakeResult = {
                    summary: `${name}さんの診断結果の要約です。素晴らしい意欲が見られます。`,
                    analysis: {
                        insight: "これはAIによる洞察です。",
                        physical: "身体の状態は良好です。",
                        mental: "心の状態も安定しています。",
                        diet: "食生活も素晴らしいです。",
                        motivation: "モチベーションが非常に高いです！"
                    },
                    plans: [
                        {title: "プランA", description: "説明A", W1:"a",W2:"b",W3:"c",W4:"d"},
                        {title: "プランB", description: "説明B", W1:"e",W2:"f",W3:"g",W4:"h"}
                    ]
                };
                onFinish(fakeResult);
            };


            return (
                <div className="max-w-2xl mx-auto p-4 sm:p-6">
                    <h1 className="text-3xl font-semibold text-center mb-6">AI心と体の根本原因診断</h1>
                    <form onSubmit={handleSubmit} className="bg-white p-8 rounded-lg shadow-sm">
                        <p className="mb-4">これは診断フォームのプレースホルダーです。ここに4ステップのフォームが統合されます。</p>
                        <label className="block mb-2">ニックネーム</label>
                        <input type="text" value={name} onChange={e => setName(e.target.value)} className="w-full p-2 border rounded-lg" required />
                        <button type="submit" className="w-full mt-6 py-3 px-4 text-white font-bold rounded-full" style={{backgroundColor: 'var(--main-pink)'}}>診断を完了する</button>
                    </form>
                </div>
            );
        }
       
        // --- Diagnosis Report Component ---
        function DiagnosisReport({ result, setView }) {
             return (
                <div className="max-w-2xl mx-auto p-4 sm:p-6 fade-in">
                    <div className="report-section">
                        <h2 className="text-2xl font-bold text-center text-gray-800 mb-2">診断レポート</h2>
                        <div className="p-6 rounded-lg mt-6" style={{backgroundColor: 'rgba(233, 164, 184, 0.1)'}}>
                           <h3 className="text-lg font-semibold border-b-2 pb-2 mb-3" style={{color: 'var(--main-pink)', borderColor: 'var(--main-pink)'}}>AIからのメッセージ</h3>
                           <p className="text-gray-700 whitespace-pre-wrap leading-relaxed">{result.summary}</p>
                        </div>
                    </div>
                    <div className="report-section mt-8">
                       <h3 className="text-xl font-bold text-gray-800 text-center mb-6">あなたの現状分析</h3>
                       <div className="space-y-6">
                           <div className="p-5 rounded-lg border" style={{backgroundColor: '#fefce8', borderColor: '#fde68a'}}><h4 className="font-semibold text-lg mb-2" style={{color: '#a16207'}}>💡 全体的な洞察と仮説</h4><p className="text-gray-700 whitespace-pre-wrap leading-relaxed">{result.analysis.insight}</p></div>
                           <div className="p-5 rounded-lg border" style={{backgroundColor: '#f0f9ff', borderColor: '#e0f2fe'}}><h4 className="font-semibold text-lg mb-2" style={{color: '#0c4a6e'}}>身体の状態について</h4><p className="text-gray-700 whitespace-pre-wrap leading-relaxed">{result.analysis.physical}</p></div>
                       </div>
                    </div>
                    <div className="text-center mt-10">
                        <button onClick={() => setView('dashboard')} className="py-2 px-8 border rounded-full shadow-sm font-semibold hover:bg-gray-100">ダッシュボードに戻る</button>
                    </div>
                </div>
            );
        }


        ReactDOM.render(<App />, document.getElementById('root'));
    </script>
</body>
</html>